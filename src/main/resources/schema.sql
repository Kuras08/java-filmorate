CREATE TABLE IF NOT EXISTS genres (
    genre_id INTEGER PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS mpa (
    mpa_id INTEGER PRIMARY KEY,
    name VARCHAR(10) NOT NULL,
    description VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS films (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description VARCHAR(255),
    release_date DATE CHECK (release_date <= CURRENT_DATE),
    duration FLOAT CHECK (duration > 0),
    mpa_id INTEGER,
    CONSTRAINT fk_mpa_films FOREIGN KEY (mpa_id) REFERENCES mpa (mpa_id)
);

CREATE TABLE IF NOT EXISTS film_genres (
    film_id INTEGER,
    genre_id INTEGER,
    PRIMARY KEY (film_id, genre_id),
    CONSTRAINT fk_film_genre FOREIGN KEY (film_id) REFERENCES films (film_id),
    CONSTRAINT fk_genre_film FOREIGN KEY (genre_id) REFERENCES genres (genre_id)
);

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    login VARCHAR(100) NOT NULL UNIQUE,
    user_name VARCHAR(100) NOT NULL,
    birthday DATE CHECK (birthday <= CURRENT_DATE)
);

CREATE TABLE IF NOT EXISTS friends (
    user_id INTEGER,
    friend_id INTEGER,
    PRIMARY KEY (user_id, friend_id),
    CONSTRAINT fk_user_friend FOREIGN KEY (user_id) REFERENCES users (user_id),
    CONSTRAINT fk_friend_user FOREIGN KEY (friend_id) REFERENCES users (user_id)
);

CREATE TABLE IF NOT EXISTS likes (
    film_id INTEGER,
    user_id INTEGER,
    PRIMARY KEY (film_id, user_id),
    CONSTRAINT fk_film_like FOREIGN KEY (film_id) REFERENCES films (film_id),
    CONSTRAINT fk_user_like FOREIGN KEY (user_id) REFERENCES users (user_id)
);

